{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/test.ts","../../server/routes/debug.ts","../../server/routes/inventory.ts","../../server/utils/password.ts","../../server/routes/auth.ts","../../server/routes/categories.ts","../../server/routes/admin-setup.ts","../../server/routes/users.ts","../../server/routes/operarios-management.ts","../../server/routes/fix-inventory.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { RequestHandler } from \"express\";\nimport mysql from 'mysql2/promise';\n\nconst connection = mysql.createPool({\n  uri: process.env.DATABASE_URL || 'mysql://nibex:nibex@212.83.137.117:3306/nibex',\n  ssl: false\n});\n\nexport const testConnection: RequestHandler = async (req, res) => {\n  try {\n    // Test basic connection\n    const [result] = await connection.execute('SELECT 1 as test');\n    \n    // Get table info\n    const [tables] = await connection.execute('SHOW TABLES');\n    \n    // Get operarios count\n    const [operarios] = await connection.execute('SELECT COUNT(*) as count FROM operarios');\n    \n    res.json({\n      success: true,\n      connection: 'OK',\n      testQuery: result,\n      tables: tables,\n      operariosCount: operarios\n    });\n  } catch (error) {\n    console.error('Database test failed:', error);\n    res.status(500).json({ \n      error: 'Database test failed',\n      details: error.message \n    });\n  }\n};\n\nexport const getSimpleOperarios: RequestHandler = async (req, res) => {\n  try {\n    const [operarios] = await connection.execute('SELECT * FROM operarios ORDER BY created_at DESC');\n    res.json(operarios);\n  } catch (error) {\n    console.error('Error fetching operarios:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch operarios',\n      details: error.message \n    });\n  }\n};\n\nexport const getSimpleTools: RequestHandler = async (req, res) => {\n  try {\n    const [tools] = await connection.execute('SELECT * FROM tools_inventory ORDER BY id DESC LIMIT 20');\n    res.json(tools);\n  } catch (error) {\n    console.error('Error fetching tools:', error);\n    res.status(500).json({\n      error: 'Failed to fetch tools',\n      details: error.message\n    });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport mysql from 'mysql2/promise';\n\nconst connection = mysql.createPool({\n  uri: process.env.DATABASE_URL || 'mysql://nibex:nibex@212.83.137.117:3306/nibex',\n  ssl: false\n});\n\nexport const getTableStructure: RequestHandler = async (req, res) => {\n  try {\n    const { table } = req.params;\n    const [columns] = await connection.execute(`DESCRIBE ${table}`);\n    res.json(columns);\n  } catch (error) {\n    console.error('Error getting table structure:', error);\n    res.status(500).json({ \n      error: 'Failed to get table structure',\n      details: error.message \n    });\n  }\n};\n\nexport const getAllTables: RequestHandler = async (req, res) => {\n  try {\n    const [tables] = await connection.execute('SHOW TABLES');\n    res.json(tables);\n  } catch (error) {\n    console.error('Error getting tables:', error);\n    res.status(500).json({ \n      error: 'Failed to get tables',\n      details: error.message \n    });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport mysql from 'mysql2/promise';\n\nconst connection = mysql.createPool({\n  uri: process.env.DATABASE_URL || 'mysql://nibex:nibex@212.83.137.117:3306/nibex',\n  ssl: false\n});\n\n// Get all tools with quantities\nexport const getAllTools: RequestHandler = async (req, res) => {\n  try {\n    const [tools] = await connection.execute(`\n      SELECT\n        id,\n        name,\n        description,\n        category_id,\n        type,\n        total_quantity,\n        available_quantity,\n        in_use_quantity,\n        maintenance_quantity,\n        unit_cost,\n        location,\n        minimum_stock,\n        notes,\n        created_at,\n        updated_at\n      FROM tools_inventory\n      ORDER BY name ASC\n    `);\n\n    res.json({\n      success: true,\n      tools: tools\n    });\n  } catch (error) {\n    console.error('Error fetching tools inventory:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch tools inventory',\n      details: error.message \n    });\n  }\n};\n\n// Get available tools (with stock > 0)\nexport const getAvailableTools: RequestHandler = async (req, res) => {\n  try {\n    const [tools] = await connection.execute(`\n      SELECT\n        id,\n        name,\n        description,\n        category_id,\n        type,\n        available_quantity,\n        unit_cost,\n        location\n      FROM tools_inventory\n      WHERE available_quantity > 0\n      ORDER BY category_id, name ASC\n    `);\n\n    res.json({\n      success: true,\n      tools: tools\n    });\n  } catch (error) {\n    console.error('Error fetching available tools:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch available tools',\n      details: error.message \n    });\n  }\n};\n\n// Authenticate operario by code\nexport const authenticateOperario: RequestHandler = async (req, res) => {\n  try {\n    const { operarioCode } = req.body;\n\n    if (!operarioCode) {\n      return res.status(400).json({ error: 'Código de operario requerido' });\n    }\n\n    const [operario] = await connection.execute(\n      'SELECT id, name, operario_code, role, active FROM operarios WHERE operario_code = ? AND active = TRUE',\n      [operarioCode]\n    );\n\n    if ((operario as any[]).length === 0) {\n      return res.status(401).json({ error: 'Código de operario inválido' });\n    }\n\n    res.json({\n      success: true,\n      operario: (operario as any[])[0]\n    });\n  } catch (error) {\n    console.error('Error authenticating operario:', error);\n    res.status(500).json({ \n      error: 'Error de autenticación',\n      details: error.message \n    });\n  }\n};\n\n// Checkout tool (reduce quantity)\nexport const checkoutTool: RequestHandler = async (req, res) => {\n  try {\n    const { toolId, operarioCode, quantity, project } = req.body;\n\n    if (!toolId || !operarioCode || !quantity) {\n      return res.status(400).json({ error: 'Faltan datos requeridos' });\n    }\n\n    // Authenticate operario\n    const [operario] = await connection.execute(\n      'SELECT id, name FROM operarios WHERE operario_code = ? AND active = TRUE',\n      [operarioCode]\n    );\n\n    if ((operario as any[]).length === 0) {\n      return res.status(401).json({ error: 'Código de operario inválido' });\n    }\n\n    const operarioData = (operario as any[])[0];\n\n    // Get tool current quantities\n    const [tool] = await connection.execute(\n      'SELECT * FROM tools_inventory WHERE id = ?',\n      [toolId]\n    );\n\n    if ((tool as any[]).length === 0) {\n      return res.status(404).json({ error: 'Herramienta no encontrada' });\n    }\n\n    const toolData = (tool as any[])[0];\n\n    if (toolData.available_quantity < quantity) {\n      return res.status(400).json({ \n        error: `Cantidad insuficiente. Disponible: ${toolData.available_quantity}` \n      });\n    }\n\n    // Update quantities\n    const newAvailable = toolData.available_quantity - quantity;\n    const newInUse = toolData.in_use_quantity + quantity;\n\n    await connection.execute(\n      'UPDATE tools_inventory SET available_quantity = ?, in_use_quantity = ?, updated_at = NOW() WHERE id = ?',\n      [newAvailable, newInUse, toolId]\n    );\n\n    // Record transaction\n    await connection.execute(\n      'INSERT INTO tool_transactions (tool_id, operario_id, transaction_type, quantity, previous_available, new_available, project, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())',\n      [toolId, operarioData.id, 'checkout', quantity, toolData.available_quantity, newAvailable, project || null]\n    );\n\n    res.json({\n      success: true,\n      message: `${quantity} unidad(es) de ${toolData.name} asignada(s) correctamente`,\n      tool: toolData.name,\n      operario: operarioData.name,\n      quantity: quantity,\n      remainingStock: newAvailable\n    });\n  } catch (error) {\n    console.error('Error checking out tool:', error);\n    res.status(500).json({ \n      error: 'Error al asignar herramienta',\n      details: error.message \n    });\n  }\n};\n\n// Checkin tool (increase quantity)\nexport const checkinTool: RequestHandler = async (req, res) => {\n  try {\n    const { toolId, operarioCode, quantity, project } = req.body;\n\n    if (!toolId || !operarioCode || !quantity) {\n      return res.status(400).json({ error: 'Faltan datos requeridos' });\n    }\n\n    // Authenticate operario\n    const [operario] = await connection.execute(\n      'SELECT id, name FROM operarios WHERE operario_code = ? AND active = TRUE',\n      [operarioCode]\n    );\n\n    if ((operario as any[]).length === 0) {\n      return res.status(401).json({ error: 'Código de operario inválido' });\n    }\n\n    const operarioData = (operario as any[])[0];\n\n    // Get tool current quantities\n    const [tool] = await connection.execute(\n      'SELECT * FROM tools_inventory WHERE id = ?',\n      [toolId]\n    );\n\n    if ((tool as any[]).length === 0) {\n      return res.status(404).json({ error: 'Herramienta no encontrada' });\n    }\n\n    const toolData = (tool as any[])[0];\n\n    if (toolData.in_use_quantity < quantity) {\n      return res.status(400).json({ \n        error: `Cantidad inválida. En uso: ${toolData.in_use_quantity}` \n      });\n    }\n\n    // Update quantities\n    const newAvailable = toolData.available_quantity + quantity;\n    const newInUse = toolData.in_use_quantity - quantity;\n\n    await connection.execute(\n      'UPDATE tools_inventory SET available_quantity = ?, in_use_quantity = ?, updated_at = NOW() WHERE id = ?',\n      [newAvailable, newInUse, toolId]\n    );\n\n    // Record transaction\n    await connection.execute(\n      'INSERT INTO tool_transactions (tool_id, operario_id, transaction_type, quantity, previous_available, new_available, project, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())',\n      [toolId, operarioData.id, 'checkin', quantity, toolData.available_quantity, newAvailable, project || null]\n    );\n\n    res.json({\n      success: true,\n      message: `${quantity} unidad(es) de ${toolData.name} devuelta(s) correctamente`,\n      tool: toolData.name,\n      operario: operarioData.name,\n      quantity: quantity,\n      newStock: newAvailable\n    });\n  } catch (error) {\n    console.error('Error checking in tool:', error);\n    res.status(500).json({ \n      error: 'Error al devolver herramienta',\n      details: error.message \n    });\n  }\n};\n\n// Add new tool to inventory\nexport const addTool: RequestHandler = async (req, res) => {\n  try {\n    const { name, description, category_id, type, total_quantity, unit_cost, location, minimum_stock, notes } = req.body;\n\n    if (!name || !category_id || !type || !total_quantity) {\n      return res.status(400).json({ error: 'Faltan datos requeridos' });\n    }\n\n    await connection.execute(\n      'INSERT INTO tools_inventory (name, description, category_id, type, total_quantity, available_quantity, in_use_quantity, maintenance_quantity, unit_cost, location, minimum_stock, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, 0, 0, ?, ?, ?, ?, NOW(), NOW())',\n      [\n        name,\n        description || null,\n        category_id,\n        type,\n        total_quantity,\n        total_quantity, // available_quantity starts as total_quantity\n        unit_cost || 0,\n        location || 'Almacén Central',\n        minimum_stock || 1,\n        notes || null\n      ]\n    );\n\n    res.json({\n      success: true,\n      message: `Herramienta ${name} añadida al inventario con ${total_quantity} unidades`\n    });\n  } catch (error) {\n    console.error('Error adding tool to inventory:', error);\n    res.status(500).json({ \n      error: 'Error al añadir herramienta',\n      details: error.message \n    });\n  }\n};\n\n// Get inventory dashboard stats\nexport const getInventoryStats: RequestHandler = async (req, res) => {\n  try {\n    const [totalTools] = await connection.execute('SELECT COUNT(*) as count FROM tools_inventory');\n    const [totalQuantity] = await connection.execute('SELECT SUM(total_quantity) as total FROM tools_inventory');\n    const [availableQuantity] = await connection.execute('SELECT SUM(available_quantity) as available FROM tools_inventory');\n    const [inUseQuantity] = await connection.execute('SELECT SUM(in_use_quantity) as inUse FROM tools_inventory');\n    const [maintenanceQuantity] = await connection.execute('SELECT SUM(maintenance_quantity) as maintenance FROM tools_inventory');\n    const [lowStockTools] = await connection.execute('SELECT COUNT(*) as count FROM tools_inventory WHERE available_quantity <= minimum_stock');\n    const [activeOperarios] = await connection.execute('SELECT COUNT(*) as count FROM operarios WHERE active = 1');\n\n    const stats = {\n      totalToolTypes: (totalTools as any[])[0].count,\n      totalQuantity: (totalQuantity as any[])[0].total || 0,\n      availableQuantity: (availableQuantity as any[])[0].available || 0,\n      inUseQuantity: (inUseQuantity as any[])[0].inUse || 0,\n      maintenanceQuantity: (maintenanceQuantity as any[])[0].maintenance || 0,\n      lowStockTools: (lowStockTools as any[])[0].count,\n      activeOperarios: (activeOperarios as any[])[0].count\n    };\n\n    res.json(stats);\n  } catch (error) {\n    console.error('Error fetching inventory stats:', error);\n    res.status(500).json({ \n      error: 'Error al obtener estadísticas',\n      details: error.message \n    });\n  }\n};\n\n// Get recent transactions\nexport const getRecentTransactions: RequestHandler = async (req, res) => {\n  try {\n    const [transactions] = await connection.execute(`\n      SELECT\n        tt.id,\n        tt.transaction_type,\n        tt.quantity,\n        tt.previous_available,\n        tt.new_available,\n        tt.project,\n        tt.created_at,\n        ti.name as tool_name,\n        oi.name as operario_name,\n        oi.email as operario_email\n      FROM tool_transactions tt\n      LEFT JOIN tools_inventory ti ON tt.tool_id = ti.id\n      LEFT JOIN operarios oi ON tt.operario_id = oi.id\n      ORDER BY tt.created_at DESC\n      LIMIT 20\n    `);\n\n    const formattedTransactions = (transactions as any[]).map(t => ({\n      id: t.id,\n      type: t.transaction_type,\n      tool: t.tool_name || 'Unknown Tool',\n      operario: t.operario_name || 'Unknown Operario',\n      operarioEmail: t.operario_email || 'Sin email',\n      quantity: t.quantity,\n      timestamp: formatTimestamp(t.created_at),\n      project: t.project,\n      stockChange: `${t.previous_available} → ${t.new_available}`\n    }));\n\n    res.json(formattedTransactions);\n  } catch (error) {\n    console.error('Error fetching recent transactions:', error);\n    res.status(500).json({ \n      error: 'Error al obtener transacciones',\n      details: error.message \n    });\n  }\n};\n\n// Update tool\nexport const updateTool: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, description, category_id, total_quantity, unit_cost, location, minimum_stock, notes } = req.body;\n\n    if (!name || !category_id) {\n      return res.status(400).json({ error: 'Nombre y categoría son requeridos' });\n    }\n\n    // Get current tool data to calculate new available quantity\n    const [currentTool] = await connection.execute(\n      'SELECT total_quantity, in_use_quantity, maintenance_quantity FROM tools_inventory WHERE id = ?',\n      [id]\n    );\n\n    if ((currentTool as any[]).length === 0) {\n      return res.status(404).json({ error: 'Herramienta no encontrada' });\n    }\n\n    const toolData = (currentTool as any[])[0];\n\n    // Calculate new available quantity\n    const newAvailableQuantity = total_quantity - toolData.in_use_quantity - toolData.maintenance_quantity;\n\n    if (newAvailableQuantity < 0) {\n      return res.status(400).json({\n        error: 'La cantidad total no puede ser menor que las herramientas en uso y mantenimiento'\n      });\n    }\n\n    await connection.execute(\n      'UPDATE tools_inventory SET name = ?, description = ?, category_id = ?, total_quantity = ?, available_quantity = ?, unit_cost = ?, location = ?, minimum_stock = ?, notes = ?, updated_at = NOW() WHERE id = ?',\n      [name, description || null, category_id, total_quantity, newAvailableQuantity, unit_cost || 0, location || 'Almacén Central', minimum_stock || 1, notes || null, id]\n    );\n\n    res.json({\n      success: true,\n      message: `Herramienta ${name} actualizada exitosamente`\n    });\n  } catch (error) {\n    console.error('Error updating tool:', error);\n    res.status(500).json({\n      error: 'Error al actualizar herramienta',\n      details: error.message\n    });\n  }\n};\n\n// Delete tool\nexport const deleteTool: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // Check if tool has any transactions\n    const [transactions] = await connection.execute(\n      'SELECT COUNT(*) as count FROM tool_transactions WHERE tool_id = ?',\n      [id]\n    );\n\n    const transactionCount = (transactions as any[])[0].count;\n\n    // Check if tool is currently in use\n    const [tool] = await connection.execute(\n      'SELECT name, in_use_quantity FROM tools_inventory WHERE id = ?',\n      [id]\n    );\n\n    if ((tool as any[]).length === 0) {\n      return res.status(404).json({ error: 'Herramienta no encontrada' });\n    }\n\n    const toolData = (tool as any[])[0];\n\n    if (toolData.in_use_quantity > 0) {\n      return res.status(400).json({\n        error: 'No se puede eliminar una herramienta que está en uso'\n      });\n    }\n\n    // If has transactions, keep for history but mark as deleted\n    if (transactionCount > 0) {\n      await connection.execute(\n        'UPDATE tools_inventory SET total_quantity = 0, available_quantity = 0, notes = CONCAT(COALESCE(notes, \"\"), \" [ELIMINADA]\"), updated_at = NOW() WHERE id = ?',\n        [id]\n      );\n\n      res.json({\n        success: true,\n        message: `Herramienta ${toolData.name} marcada como eliminada (tiene historial de transacciones)`\n      });\n    } else {\n      // Safe to delete completely\n      await connection.execute('DELETE FROM tools_inventory WHERE id = ?', [id]);\n\n      res.json({\n        success: true,\n        message: `Herramienta ${toolData.name} eliminada exitosamente`\n      });\n    }\n  } catch (error) {\n    console.error('Error deleting tool:', error);\n    res.status(500).json({\n      error: 'Error al eliminar herramienta',\n      details: error.message\n    });\n  }\n};\n\n// Helper function to format timestamp\nfunction formatTimestamp(date: Date | string | null): string {\n  if (!date) return 'Unknown';\n\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  const now = new Date();\n  const diffInMs = now.getTime() - dateObj.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n\n  if (diffInMinutes < 1) return 'Ahora mismo';\n  if (diffInMinutes < 60) return `Hace ${diffInMinutes} min`;\n  if (diffInHours < 24) return `Hace ${diffInHours}h`;\n  if (diffInDays < 7) return `Hace ${diffInDays} día${diffInDays > 1 ? 's' : ''}`;\n\n  return dateObj.toLocaleDateString('es-ES');\n}\n","import crypto from 'crypto';\n\n// Use the provided NEXT_AUTH_SECRET\nconst SECRET = 'NjAFELjMxFZRngffrSylau0suRtRZ/fIMdmB6UQ6Ie8=';\n\n/**\n * Encrypts a password using HMAC-SHA256 with the NEXT_AUTH_SECRET\n */\nexport function encryptPassword(password: string): string {\n  const hmac = crypto.createHmac('sha256', SECRET);\n  hmac.update(password);\n  return hmac.digest('hex');\n}\n\n/**\n * Verifies a password against an encrypted hash\n */\nexport function verifyPassword(password: string, encryptedPassword: string): boolean {\n  const encrypted = encryptPassword(password);\n  return encrypted === encryptedPassword;\n}\n\n/**\n * Generates an encrypted password for 'C@t4luny4'\n */\nexport function getDefaultAdminPassword(): string {\n  return encryptPassword('C@t4luny4');\n}\n","import { RequestHandler } from \"express\";\nimport mysql from 'mysql2/promise';\nimport { verifyPassword } from '../utils/password';\n\nconst connection = mysql.createPool({\n  uri: process.env.DATABASE_URL || 'mysql://nibex:nibex@212.83.137.117:3306/nibex',\n  ssl: false\n});\n\n// Login endpoint\nexport const loginUser: RequestHandler = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({ error: 'Email y contraseña son requeridos' });\n    }\n\n    // Check admin users table first\n    const [adminUsers] = await connection.execute(\n      'SELECT id, username, email, password_hash, active FROM users WHERE email = ? AND active = TRUE',\n      [email]\n    );\n\n    if ((adminUsers as any[]).length > 0) {\n      const user = (adminUsers as any[])[0];\n\n      // Verify password using encryption\n      const isValidPassword = verifyPassword(password, user.password_hash);\n\n      if (isValidPassword) {\n        res.json({\n          success: true,\n          user: {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            role: 'admin' // All admin users are administrators\n          }\n        });\n        return;\n      }\n    }\n\n    // Check users table for admin login with encrypted passwords\n    const [regularUsers] = await connection.execute(\n      'SELECT id, name, email, password, role, status FROM users WHERE email = ? AND status = \"ACTIVE\"',\n      [email]\n    );\n\n    if ((regularUsers as any[]).length > 0) {\n      const user = (regularUsers as any[])[0];\n\n      // Verify password using encryption\n      const isValidPassword = verifyPassword(password, user.password);\n\n      if (isValidPassword) {\n        res.json({\n          success: true,\n          user: {\n            id: user.id,\n            username: user.name,\n            email: user.email,\n            role: 'admin' // All users are administrators\n          }\n        });\n        return;\n      }\n    }\n\n    // Check operarios table for operator login with codes\n    const [operarios] = await connection.execute(\n      'SELECT id, name, email, operario_code, active FROM operarios WHERE operario_code = ? AND active = TRUE',\n      [password] // Use password field as operario_code\n    );\n\n    if ((operarios as any[]).length > 0) {\n      const operario = (operarios as any[])[0];\n\n      res.json({\n        success: true,\n        user: {\n          id: operario.id,\n          username: operario.name,\n          email: operario.email || `operario${operario.id}@nibex.com`,\n          role: 'operario'\n        }\n      });\n      return;\n    }\n\n    // If not found in either table, return error\n    res.status(401).json({ error: 'Credenciales incorrectas' });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({ error: 'Error interno del servidor' });\n  }\n};\n\n// Get current user info\nexport const getCurrentUser: RequestHandler = async (req, res) => {\n  try {\n    const { userId } = req.params;\n\n    const [users] = await connection.execute(\n      'SELECT id, username, email, active FROM users WHERE id = ? AND active = TRUE',\n      [userId]\n    );\n\n    if ((users as any[]).length === 0) {\n      return res.status(404).json({ error: 'Usuario no encontrado' });\n    }\n\n    const user = (users as any[])[0];\n    res.json({\n      success: true,\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        role: 'admin'\n      }\n    });\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(500).json({ error: 'Error interno del servidor' });\n  }\n};\n\n// This function is no longer needed as we create the admin user in the reset process\n\n// Logout endpoint\nexport const logoutUser: RequestHandler = async (req, res) => {\n  res.json({ success: true, message: 'Sesión cerrada correctamente' });\n};\n","import { RequestHandler } from \"express\";\nimport mysql from 'mysql2/promise';\n\nconst connection = mysql.createPool({\n  uri: process.env.DATABASE_URL || 'mysql://nibex:nibex@212.83.137.117:3306/nibex',\n  ssl: false\n});\n\n// Get all categories\nexport const getAllCategories: RequestHandler = async (req, res) => {\n  try {\n    const [categories] = await connection.execute(`\n      SELECT \n        id,\n        name,\n        description,\n        type,\n        color,\n        active,\n        created_at,\n        updated_at\n      FROM tool_categories \n      WHERE active = TRUE\n      ORDER BY type, name ASC\n    `);\n\n    res.json(categories);\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch categories',\n      details: error.message \n    });\n  }\n};\n\n// Get categories by type\nexport const getCategoriesByType: RequestHandler = async (req, res) => {\n  try {\n    const { type } = req.params;\n    \n    const [categories] = await connection.execute(`\n      SELECT \n        id,\n        name,\n        description,\n        type,\n        color,\n        active,\n        created_at,\n        updated_at\n      FROM tool_categories \n      WHERE active = TRUE AND type = ?\n      ORDER BY name ASC\n    `, [type]);\n\n    res.json(categories);\n  } catch (error) {\n    console.error('Error fetching categories by type:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch categories',\n      details: error.message \n    });\n  }\n};\n\n// Create new category\nexport const createCategory: RequestHandler = async (req, res) => {\n  try {\n    const { name, description, type, color } = req.body;\n\n    if (!name || !type) {\n      return res.status(400).json({ error: 'Nombre y tipo son requeridos' });\n    }\n\n    if (!['individual', 'common'].includes(type)) {\n      return res.status(400).json({ error: 'Tipo debe ser \"individual\" o \"common\"' });\n    }\n\n    // Check if category with same name and type already exists\n    const [existing] = await connection.execute(\n      'SELECT id FROM tool_categories WHERE name = ? AND type = ? AND active = TRUE',\n      [name, type]\n    );\n\n    if ((existing as any[]).length > 0) {\n      return res.status(400).json({ error: 'Ya existe una categoría con este nombre para este tipo' });\n    }\n\n    const [result] = await connection.execute(\n      'INSERT INTO tool_categories (name, description, type, color, active, created_at) VALUES (?, ?, ?, ?, ?, NOW())',\n      [name, description || null, type, color || '#E2372B', true]\n    );\n\n    res.status(201).json({\n      success: true,\n      message: `Categoría \"${name}\" creada correctamente`,\n      id: (result as any).insertId\n    });\n  } catch (error) {\n    console.error('Error creating category:', error);\n    res.status(500).json({ \n      error: 'Error al crear categoría',\n      details: error.message \n    });\n  }\n};\n\n// Update category\nexport const updateCategory: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, description, type, color, active } = req.body;\n\n    if (!name || !type) {\n      return res.status(400).json({ error: 'Nombre y tipo son requeridos' });\n    }\n\n    if (!['individual', 'common'].includes(type)) {\n      return res.status(400).json({ error: 'Tipo debe ser \"individual\" o \"common\"' });\n    }\n\n    // Check if category exists\n    const [existing] = await connection.execute(\n      'SELECT id FROM tool_categories WHERE id = ?',\n      [id]\n    );\n\n    if ((existing as any[]).length === 0) {\n      return res.status(404).json({ error: 'Categoría no encontrada' });\n    }\n\n    // Check if another category with same name and type exists\n    const [duplicate] = await connection.execute(\n      'SELECT id FROM tool_categories WHERE name = ? AND type = ? AND active = TRUE AND id != ?',\n      [name, type, id]\n    );\n\n    if ((duplicate as any[]).length > 0) {\n      return res.status(400).json({ error: 'Ya existe otra categoría con este nombre para este tipo' });\n    }\n\n    await connection.execute(\n      'UPDATE tool_categories SET name = ?, description = ?, type = ?, color = ?, active = ?, updated_at = NOW() WHERE id = ?',\n      [name, description || null, type, color || '#E2372B', active !== undefined ? active : true, id]\n    );\n\n    res.json({\n      success: true,\n      message: `Categoría \"${name}\" actualizada correctamente`\n    });\n  } catch (error) {\n    console.error('Error updating category:', error);\n    res.status(500).json({ \n      error: 'Error al actualizar categoría',\n      details: error.message \n    });\n  }\n};\n\n// Delete category (soft delete)\nexport const deleteCategory: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // Check if category exists\n    const [existing] = await connection.execute(\n      'SELECT name FROM tool_categories WHERE id = ? AND active = TRUE',\n      [id]\n    );\n\n    if ((existing as any[]).length === 0) {\n      return res.status(404).json({ error: 'Categoría no encontrada' });\n    }\n\n    const categoryName = (existing as any[])[0].name;\n\n    // Check if category is being used by any tools\n    const [tools] = await connection.execute(\n      'SELECT COUNT(*) as count FROM tools_inventory WHERE category_id = ?',\n      [id]\n    );\n\n    const toolCount = (tools as any[])[0].count;\n\n    if (toolCount > 0) {\n      return res.status(400).json({ \n        error: `No se puede eliminar la categoría \"${categoryName}\" porque tiene ${toolCount} herramienta(s) asignada(s)` \n      });\n    }\n\n    // Soft delete\n    await connection.execute(\n      'UPDATE tool_categories SET active = FALSE, updated_at = NOW() WHERE id = ?',\n      [id]\n    );\n\n    res.json({\n      success: true,\n      message: `Categoría \"${categoryName}\" eliminada correctamente`\n    });\n  } catch (error) {\n    console.error('Error deleting category:', error);\n    res.status(500).json({ \n      error: 'Error al eliminar categoría',\n      details: error.message \n    });\n  }\n};\n\n// Get category statistics\nexport const getCategoryStats: RequestHandler = async (req, res) => {\n  try {\n    const [stats] = await connection.execute(`\n      SELECT \n        tc.id,\n        tc.name,\n        tc.type,\n        tc.color,\n        COUNT(ti.id) as tool_count,\n        COALESCE(SUM(ti.total_quantity), 0) as total_quantity,\n        COALESCE(SUM(ti.available_quantity), 0) as available_quantity,\n        COALESCE(SUM(ti.in_use_quantity), 0) as in_use_quantity\n      FROM tool_categories tc\n      LEFT JOIN tools_inventory ti ON tc.id = ti.category_id\n      WHERE tc.active = TRUE\n      GROUP BY tc.id, tc.name, tc.type, tc.color\n      ORDER BY tc.type, tc.name\n    `);\n\n    res.json(stats);\n  } catch (error) {\n    console.error('Error fetching category stats:', error);\n    res.status(500).json({ \n      error: 'Error al obtener estadísticas de categorías',\n      details: error.message \n    });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport mysql from 'mysql2/promise';\n\nconst connection = mysql.createPool({\n  uri: process.env.DATABASE_URL || 'mysql://nibex:nibex@212.83.137.117:3306/nibex',\n  ssl: false\n});\n\nexport const checkAndCreateAdmin: RequestHandler = async (req, res) => {\n  try {\n    console.log('🔍 Verificando usuario administrador...');\n\n    // Check if users table exists\n    const [tables] = await connection.execute(`\n      SELECT TABLE_NAME \n      FROM INFORMATION_SCHEMA.TABLES \n      WHERE TABLE_SCHEMA = 'nibex' AND TABLE_NAME = 'users'\n    `);\n\n    if ((tables as any[]).length === 0) {\n      console.log('❌ Tabla users no existe. Creándola...');\n      \n      // Create users table\n      await connection.execute(`\n        CREATE TABLE users (\n          id INT PRIMARY KEY AUTO_INCREMENT,\n          username VARCHAR(100) UNIQUE NOT NULL,\n          email VARCHAR(255) UNIQUE,\n          password_hash VARCHAR(255) NOT NULL,\n          active BOOLEAN DEFAULT TRUE,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n        )\n      `);\n      console.log('✅ Tabla users creada');\n    }\n\n    // Check if admin user exists\n    const [existingAdmin] = await connection.execute(\n      'SELECT id, email, username FROM users WHERE email = ?',\n      ['admin@nibexinstalacions.com']\n    );\n\n    if ((existingAdmin as any[]).length === 0) {\n      console.log('❌ Usuario administrador no existe. Creándolo...');\n      \n      // Create admin user\n      await connection.execute(`\n        INSERT INTO users (username, email, password_hash, active) VALUES\n        ('admin', 'admin@nibexinstalacions.com', 'C@t4luny4', TRUE)\n      `);\n      \n      console.log('✅ Usuario administrador creado');\n      console.log('   Email: admin@nibexinstalacions.com');\n      console.log('   Password: C@t4luny4');\n\n      res.json({\n        success: true,\n        message: 'Usuario administrador creado correctamente',\n        user: {\n          email: 'admin@nibexinstalacions.com',\n          username: 'admin',\n          role: 'admin'\n        }\n      });\n    } else {\n      console.log('✅ Usuario administrador ya existe');\n      const admin = (existingAdmin as any[])[0];\n      \n      res.json({\n        success: true,\n        message: 'Usuario administrador ya existe',\n        user: {\n          id: admin.id,\n          email: admin.email,\n          username: admin.username\n        }\n      });\n    }\n\n  } catch (error) {\n    console.error('❌ Error configurando usuario administrador:', error);\n    res.status(500).json({ \n      error: 'Error configurando usuario administrador',\n      details: error.message \n    });\n  }\n};\n\nexport const getAllAdminUsers: RequestHandler = async (req, res) => {\n  try {\n    const [users] = await connection.execute(`\n      SELECT id, username, email, active, created_at, updated_at\n      FROM users\n      ORDER BY created_at DESC\n    `);\n\n    res.json({\n      success: true,\n      users: users\n    });\n  } catch (error) {\n    console.error('Error fetching admin users:', error);\n    res.status(500).json({ \n      error: 'Error fetching admin users',\n      details: error.message \n    });\n  }\n};\n\nexport const testLogin: RequestHandler = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    console.log('🔐 Testing login for:', email);\n\n    const [users] = await connection.execute(\n      'SELECT id, username, email, password_hash, active FROM users WHERE email = ? AND active = TRUE',\n      [email]\n    );\n\n    if ((users as any[]).length === 0) {\n      console.log('❌ Usuario no encontrado:', email);\n      return res.status(404).json({ error: 'Usuario no encontrado' });\n    }\n\n    const user = (users as any[])[0];\n    console.log('✅ Usuario encontrado:', {\n      id: user.id,\n      email: user.email,\n      username: user.username,\n      role: user.role,\n      stored_password: user.password_hash,\n      provided_password: password\n    });\n\n    // Simple password verification (for demo purposes)\n    if (user.password_hash === password) {\n      console.log('✅ Contraseña correcta');\n      res.json({\n        success: true,\n        message: 'Login exitoso',\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          role: user.role\n        }\n      });\n    } else {\n      console.log('❌ Contraseña incorrecta');\n      res.status(401).json({ error: 'Contraseña incorrecta' });\n    }\n\n  } catch (error) {\n    console.error('Error testing login:', error);\n    res.status(500).json({ \n      error: 'Error testing login',\n      details: error.message \n    });\n  }\n};\n","import { RequestHandler } from 'express';\nimport mysql from 'mysql2/promise';\nimport { encryptPassword } from '../utils/password';\n\n// Database connection\nconst connection = mysql.createPool({\n  uri: process.env.DATABASE_URL || 'mysql://nibex:nibex@212.83.137.117:3306/nibex',\n  ssl: false\n});\n\n// Get all users\nexport const getAllUsers: RequestHandler = async (req, res) => {\n  try {\n    const [users] = await connection.execute(`\n      SELECT id, username, email,\n             CASE WHEN active = 1 THEN 'ACTIVE' ELSE 'INACTIVE' END as active,\n             created_at\n      FROM users\n      ORDER BY created_at DESC\n    `);\n\n    res.json({\n      success: true,\n      users: users\n    });\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Error al obtener usuarios'\n    });\n  }\n};\n\n// Create new user\nexport const createUser: RequestHandler = async (req, res) => {\n  try {\n    const { username, email, password } = req.body;\n\n    if (!username || !password) {\n      return res.status(400).json({\n        success: false,\n        error: 'Nombre de usuario y contraseña son requeridos'\n      });\n    }\n\n    // Check if username already exists\n    const [existingUsername] = await connection.execute(\n      'SELECT id FROM users WHERE username = ?',\n      [username]\n    );\n\n    if ((existingUsername as any[]).length > 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'El nombre de usuario ya existe'\n      });\n    }\n\n    // Check if email already exists (if provided)\n    if (email) {\n      const [existingEmail] = await connection.execute(\n        'SELECT id FROM users WHERE email = ?',\n        [email]\n      );\n\n      if ((existingEmail as any[]).length > 0) {\n        return res.status(400).json({\n          success: false,\n          error: 'El email ya existe'\n        });\n      }\n    }\n\n    // Encrypt password\n    const hashedPassword = encryptPassword(password);\n\n    // Insert new user\n    const [result] = await connection.execute(\n      'INSERT INTO users (username, email, password_hash, active) VALUES (?, ?, ?, TRUE)',\n      [username, email, hashedPassword]\n    );\n\n    res.json({\n      success: true,\n      message: 'Usuario creado exitosamente',\n      userId: (result as any).insertId\n    });\n  } catch (error) {\n    console.error('Error creating user:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Error al crear usuario'\n    });\n  }\n};\n\n// Update user\nexport const updateUser: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { username, email, password } = req.body;\n\n    if (!username) {\n      return res.status(400).json({\n        success: false,\n        error: 'Nombre de usuario es requerido'\n      });\n    }\n\n    // Check if user exists\n    const [existingUser] = await connection.execute(\n      'SELECT id, username FROM users WHERE id = ?',\n      [id]\n    );\n\n    if ((existingUser as any[]).length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Usuario no encontrado'\n      });\n    }\n\n    // Check if username is taken by another user\n    const [usernameCheck] = await connection.execute(\n      'SELECT id FROM users WHERE username = ? AND id != ?',\n      [username, id]\n    );\n\n    if ((usernameCheck as any[]).length > 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'El nombre de usuario ya está registrado'\n      });\n    }\n\n    // Check if email is taken by another user (if provided)\n    if (email) {\n      const [emailCheck] = await connection.execute(\n        'SELECT id FROM users WHERE email = ? AND id != ?',\n        [email, id]\n      );\n\n      if ((emailCheck as any[]).length > 0) {\n        return res.status(400).json({\n          success: false,\n          error: 'El email ya está registrado'\n        });\n      }\n    }\n\n    // Update user\n    let updateQuery = 'UPDATE users SET username = ?, email = ?';\n    let updateParams = [username, email];\n\n    if (password) {\n      const hashedPassword = encryptPassword(password);\n      updateQuery += ', password_hash = ?';\n      updateParams.push(hashedPassword);\n    }\n\n    updateQuery += ' WHERE id = ?';\n    updateParams.push(id);\n\n    await connection.execute(updateQuery, updateParams);\n\n    res.json({\n      success: true,\n      message: 'Usuario actualizado exitosamente'\n    });\n  } catch (error) {\n    console.error('Error updating user:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Error al actualizar usuario'\n    });\n  }\n};\n\n// Delete user\nexport const deleteUser: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // Check if user exists\n    const [existingUser] = await connection.execute(\n      'SELECT id, username FROM users WHERE id = ?',\n      [id]\n    );\n\n    if ((existingUser as any[]).length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Usuario no encontrado'\n      });\n    }\n\n    const user = (existingUser as any[])[0];\n\n    // Prevent deleting the main admin user\n    if (user.username === 'admin') {\n      return res.status(400).json({\n        success: false,\n        error: 'No se puede eliminar el usuario administrador principal'\n      });\n    }\n\n    // Delete user\n    await connection.execute('DELETE FROM users WHERE id = ?', [id]);\n\n    res.json({\n      success: true,\n      message: 'Usuario eliminado exitosamente'\n    });\n  } catch (error) {\n    console.error('Error deleting user:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Error al eliminar usuario'\n    });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport mysql from 'mysql2/promise';\nimport crypto from 'crypto';\n\nconst connection = mysql.createPool({\n  uri: process.env.DATABASE_URL || 'mysql://nibex:nibex@212.83.137.117:3306/nibex',\n  ssl: false\n});\n\n// Get all operarios\nexport const getOperarios: RequestHandler = async (req, res) => {\n  try {\n    const [operarios] = await connection.execute(\n      'SELECT id, name, email, operario_code, active, created_at FROM operarios ORDER BY created_at DESC'\n    );\n\n    res.json({\n      success: true,\n      operarios\n    });\n  } catch (error) {\n    console.error('Error getting operarios:', error);\n    res.status(500).json({ error: 'Error interno del servidor' });\n  }\n};\n\n// Create new operario\nexport const createOperario: RequestHandler = async (req, res) => {\n  try {\n    const { name, email } = req.body;\n\n    if (!name) {\n      return res.status(400).json({ error: 'El nombre es requerido' });\n    }\n\n    // Generate unique operario code (4 digits)\n    const generateCode = () => Math.floor(1000 + Math.random() * 9000).toString();\n    let operarioCode = generateCode();\n\n    // Ensure code is unique\n    let codeExists = true;\n    while (codeExists) {\n      const [existing] = await connection.execute(\n        'SELECT COUNT(*) as count FROM operarios WHERE operario_code = ?',\n        [operarioCode]\n      );\n      \n      if ((existing as any[])[0].count === 0) {\n        codeExists = false;\n      } else {\n        operarioCode = generateCode();\n      }\n    }\n\n    // Insert new operario\n    await connection.execute(\n      'INSERT INTO operarios (name, email, operario_code, active) VALUES (?, ?, ?, TRUE)',\n      [name, email || null, operarioCode]\n    );\n\n    res.json({\n      success: true,\n      message: 'Operario creado exitosamente',\n      operario: {\n        name,\n        email: email || null,\n        operario_code: operarioCode\n      }\n    });\n  } catch (error) {\n    console.error('Error creating operario:', error);\n    \n    if ((error as any).code === 'ER_DUP_ENTRY') {\n      res.status(400).json({ error: 'El email ya está en uso' });\n    } else {\n      res.status(500).json({ error: 'Error interno del servidor' });\n    }\n  }\n};\n\n// Update operario\nexport const updateOperario: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, email, active } = req.body;\n\n    if (!name) {\n      return res.status(400).json({ error: 'El nombre es requerido' });\n    }\n\n    await connection.execute(\n      'UPDATE operarios SET name = ?, email = ?, active = ? WHERE id = ?',\n      [name, email || null, active !== false, id]\n    );\n\n    res.json({\n      success: true,\n      message: 'Operario actualizado exitosamente'\n    });\n  } catch (error) {\n    console.error('Error updating operario:', error);\n    \n    if ((error as any).code === 'ER_DUP_ENTRY') {\n      res.status(400).json({ error: 'El email ya está en uso' });\n    } else {\n      res.status(500).json({ error: 'Error interno del servidor' });\n    }\n  }\n};\n\n// Delete operario\nexport const deleteOperario: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // Check if operario has any transactions\n    const [transactions] = await connection.execute(\n      'SELECT COUNT(*) as count FROM tool_transactions WHERE operario_id = ?',\n      [id]\n    );\n\n    if ((transactions as any[])[0].count > 0) {\n      // Don't delete, just deactivate\n      await connection.execute(\n        'UPDATE operarios SET active = FALSE WHERE id = ?',\n        [id]\n      );\n      \n      res.json({\n        success: true,\n        message: 'Operario desactivado exitosamente (tiene historial de transacciones)'\n      });\n    } else {\n      // Safe to delete\n      await connection.execute(\n        'DELETE FROM operarios WHERE id = ?',\n        [id]\n      );\n      \n      res.json({\n        success: true,\n        message: 'Operario eliminado exitosamente'\n      });\n    }\n  } catch (error) {\n    console.error('Error deleting operario:', error);\n    res.status(500).json({ error: 'Error interno del servidor' });\n  }\n};\n\n// Regenerate operario code\nexport const regenerateCode: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // Generate new unique code\n    const generateCode = () => Math.floor(1000 + Math.random() * 9000).toString();\n    let operarioCode = generateCode();\n\n    // Ensure code is unique\n    let codeExists = true;\n    while (codeExists) {\n      const [existing] = await connection.execute(\n        'SELECT COUNT(*) as count FROM operarios WHERE operario_code = ? AND id != ?',\n        [operarioCode, id]\n      );\n      \n      if ((existing as any[])[0].count === 0) {\n        codeExists = false;\n      } else {\n        operarioCode = generateCode();\n      }\n    }\n\n    // Update operario code\n    await connection.execute(\n      'UPDATE operarios SET operario_code = ? WHERE id = ?',\n      [operarioCode, id]\n    );\n\n    res.json({\n      success: true,\n      message: 'Código regenerado exitosamente',\n      operario_code: operarioCode\n    });\n  } catch (error) {\n    console.error('Error regenerating code:', error);\n    res.status(500).json({ error: 'Error interno del servidor' });\n  }\n};\n","import { RequestHandler } from 'express';\nimport mysql from 'mysql2/promise';\n\n// Database connection\nconst connection = mysql.createPool({\n  uri: process.env.DATABASE_URL || 'mysql://nibex:nibex@212.83.137.117:3306/nibex',\n  ssl: false\n});\n\n// Fix inventory quantities based on transactions\nexport const fixInventoryQuantities: RequestHandler = async (req, res) => {\n  try {\n    const { toolId } = req.params;\n    \n    // Get tool data\n    const [tools] = await connection.execute(\n      'SELECT * FROM tools_inventory WHERE id = ?',\n      [toolId]\n    );\n    \n    if ((tools as any[]).length === 0) {\n      return res.status(404).json({ error: 'Herramienta no encontrada' });\n    }\n    \n    const tool = (tools as any[])[0];\n    \n    // Calculate quantities based on transactions\n    const [transactions] = await connection.execute(`\n      SELECT \n        transaction_type,\n        SUM(quantity) as total_quantity\n      FROM tool_transactions \n      WHERE tool_id = ?\n      GROUP BY transaction_type\n    `, [toolId]);\n    \n    let totalCheckout = 0;\n    let totalCheckin = 0;\n    \n    (transactions as any[]).forEach((t: any) => {\n      if (t.transaction_type === 'checkout') {\n        totalCheckout = t.total_quantity;\n      } else if (t.transaction_type === 'checkin') {\n        totalCheckin = t.total_quantity;\n      }\n    });\n    \n    // Calculate correct quantities\n    const currentInUse = totalCheckout - totalCheckin;\n    const currentAvailable = tool.total_quantity - currentInUse;\n    \n    // Update tool with correct quantities\n    await connection.execute(\n      'UPDATE tools_inventory SET available_quantity = ?, in_use_quantity = ? WHERE id = ?',\n      [currentAvailable, currentInUse, toolId]\n    );\n    \n    res.json({\n      success: true,\n      message: 'Cantidades corregidas',\n      tool: tool.name,\n      before: {\n        available_quantity: tool.available_quantity,\n        in_use_quantity: tool.in_use_quantity\n      },\n      after: {\n        available_quantity: currentAvailable,\n        in_use_quantity: currentInUse\n      },\n      transactions: {\n        total_checkout: totalCheckout,\n        total_checkin: totalCheckin\n      }\n    });\n    \n  } catch (error) {\n    console.error('Error fixing inventory quantities:', error);\n    res.status(500).json({ \n      error: 'Error al corregir cantidades',\n      details: error.message \n    });\n  }\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport {\n  checkoutTool,\n  checkinTool,\n  getDashboardStats,\n  getRecentActivity\n} from \"./routes/simple-tools\";\nimport { testConnection, getSimpleOperarios, getSimpleTools } from \"./routes/test\";\nimport { getTableStructure, getAllTables } from \"./routes/debug\";\nimport {\n  getAllTools,\n  getAvailableTools,\n  authenticateOperario,\n  checkoutTool as inventoryCheckout,\n  checkinTool as inventoryCheckin,\n  addTool,\n  updateTool,\n  deleteTool,\n  getInventoryStats,\n  getRecentTransactions\n} from \"./routes/inventory\";\nimport { loginUser, getCurrentUser, logoutUser, createDefaultAdmin } from \"./routes/auth\";\nimport {\n  getAllCategories,\n  getCategoriesByType,\n  createCategory,\n  updateCategory,\n  deleteCategory,\n  getCategoryStats\n} from \"./routes/categories\";\nimport { checkAndCreateAdmin, getAllAdminUsers, testLogin } from \"./routes/admin-setup\";\nimport { createUserInUsersTable, getAllUsersFromUsersTable } from \"./routes/user-setup\";\nimport {\n  getAllUsers,\n  createUser,\n  updateUser,\n  deleteUser\n} from \"./routes/users\";\nimport {\n  getOperarios,\n  createOperario,\n  updateOperario,\n  deleteOperario,\n  regenerateCode\n} from \"./routes/operarios-management\";\nimport { fixInventoryQuantities } from \"./routes/fix-inventory\";\nimport { setupInventoryTables } from \"./db/inventory-setup\";\nimport { resetDatabase } from \"./db/reset\";\nimport { initializeDatabase } from \"./db/init\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Setup admin user on server start\n  fetch('http://localhost:8080/api/admin/setup')\n    .then(response => response.json())\n    .then(data => console.log('Admin setup result:', data.message))\n    .catch(error => console.log('Admin setup will be available via API'));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Test endpoints\n  app.get(\"/api/test/connection\", testConnection);\n  app.get(\"/api/test/operarios\", getSimpleOperarios);\n  app.get(\"/api/test/tools\", getSimpleTools);\n\n  // Debug endpoints\n  app.get(\"/api/debug/tables\", getAllTables);\n  app.get(\"/api/debug/table/:table\", getTableStructure);\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", loginUser);\n  app.get(\"/api/auth/user/:userId\", getCurrentUser);\n  app.post(\"/api/auth/logout\", logoutUser);\n\n  // Admin setup routes\n  app.get(\"/api/admin/setup\", checkAndCreateAdmin);\n  app.post(\"/api/admin/test-login\", testLogin);\n\n  // Operarios management routes\n  app.get(\"/api/operarios\", getOperarios);\n  app.post(\"/api/operarios\", createOperario);\n  app.put(\"/api/operarios/:id\", updateOperario);\n  app.delete(\"/api/operarios/:id\", deleteOperario);\n  app.post(\"/api/operarios/:id/regenerate-code\", regenerateCode);\n\n  // Users management routes\n  app.get(\"/api/admin/users\", getAllUsers);\n  app.post(\"/api/admin/users\", createUser);\n  app.put(\"/api/admin/users/:id\", updateUser);\n  app.delete(\"/api/admin/users/:id\", deleteUser);\n\n  // Categories API routes\n  app.get(\"/api/categories\", getAllCategories);\n  app.get(\"/api/categories/type/:type\", getCategoriesByType);\n  app.get(\"/api/categories/stats\", getCategoryStats);\n  app.post(\"/api/categories\", createCategory);\n  app.put(\"/api/categories/:id\", updateCategory);\n  app.delete(\"/api/categories/:id\", deleteCategory);\n\n  // Inventory API routes\n  app.get(\"/api/inventory/tools\", getAllTools);\n  app.get(\"/api/inventory/available\", getAvailableTools);\n  app.post(\"/api/inventory/auth\", authenticateOperario);\n  app.post(\"/api/inventory/checkout\", inventoryCheckout);\n  app.post(\"/api/inventory/checkin\", inventoryCheckin);\n  app.post(\"/api/inventory/add\", addTool);\n  app.put(\"/api/inventory/tools/:id\", updateTool);\n  app.delete(\"/api/inventory/tools/:id\", deleteTool);\n  app.get(\"/api/inventory/stats\", getInventoryStats);\n  app.get(\"/api/inventory/transactions\", getRecentTransactions);\n\n  // Fix inventory quantities\n  app.post(\"/api/inventory/fix/:toolId\", fixInventoryQuantities);\n\n  return app;\n}\n","import path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer } from \"./index\";\nimport express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 8080;\n\n// In production, serve the built SPA files\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["connection","app","inventoryCheckout","inventoryCheckin"],"mappings":"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"}